"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import logging
from celery.schedules import crontab
from envparse import env

try:
    from config.local_config import PARAMS as config
except ImportError:
    logging.info('Setup config/local_config.py')
    config = {}

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$97c@2$y*@x^uoxr4-+)x1i!6!f10&g2cc68z*_ph8o+pq-q5q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'currency'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'utils.request_middlewares.JsonParamsToRequest',

]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database

DATABASES = {
    'default': {
        'ENGINE': env('POSTGRES_ENGINE', default=config.get('POSTGRES_ENGINE')),
        'NAME': env('POSTGRES_DB', default=config.get('POSTGRES_DB')),
        'HOST': env('POSTGRES_HOST', default=config.get('POSTGRES_HOST')),
        'PORT': env('POSTGRES_PORT', default=config.get('POSTGRES_PORT')),
        'USER': env('POSTGRES_USER', default=config.get('POSTGRES_USER')),
        'PASSWORD': env('POSTGRES_PASSWORD', default=config.get('POSTGRES_PASSWORD')),
        'CHARSET': 'utf8',
        'COLLATION': 'utf8_general_ci',
    },
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

######################
# c e l e r y
######################

CELERY_BROKER_URL = env('REDIS_URL', default=config.get('REDIS_URL'))
CELERY_QUEUE_COUNTDOWN = 600
CELERY_QUEUE_MAX_RETRIES = 3
CELERY_TIMEZONE = 'UTC'
CELERY_ALWAYS_EAGER = False
CELERY_RESULT_BACKEND = env('REDIS_URL', default=config.get('REDIS_URL'))
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'

CELERY_IMPORTS = [
    'currency.tasks'
]

CELERY_RESULT_EXPIRES = 60 * 60

OPEN_EXCHANGE_RATE_URL = env('OPEN_EXCHANGE_RATE_URL', default=config.get('OPEN_EXCHANGE_RATE_URL'))
OPEN_EXCHANGE_RATE_API_ID = env('OPEN_EXCHANGE_RATE_API_ID', default=config.get('OPEN_EXCHANGE_RATE_API_ID'))
